// Code generated by ent, DO NOT EDIT.

package channel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the channel type in the database.
	Label = "channel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExtID holds the string denoting the ext_id field in the database.
	FieldExtID = "ext_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldImagePath holds the string denoting the image_path field in the database.
	FieldImagePath = "image_path"
	// FieldRetention holds the string denoting the retention field in the database.
	FieldRetention = "retention"
	// FieldRetentionDays holds the string denoting the retention_days field in the database.
	FieldRetentionDays = "retention_days"
	// FieldStorageSizeBytes holds the string denoting the storage_size_bytes field in the database.
	FieldStorageSizeBytes = "storage_size_bytes"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeVods holds the string denoting the vods edge name in mutations.
	EdgeVods = "vods"
	// EdgeLive holds the string denoting the live edge name in mutations.
	EdgeLive = "live"
	// Table holds the table name of the channel in the database.
	Table = "channels"
	// VodsTable is the table that holds the vods relation/edge.
	VodsTable = "vods"
	// VodsInverseTable is the table name for the Vod entity.
	// It exists in this package in order to avoid circular dependency with the "vod" package.
	VodsInverseTable = "vods"
	// VodsColumn is the table column denoting the vods relation/edge.
	VodsColumn = "channel_vods"
	// LiveTable is the table that holds the live relation/edge.
	LiveTable = "lives"
	// LiveInverseTable is the table name for the Live entity.
	// It exists in this package in order to avoid circular dependency with the "live" package.
	LiveInverseTable = "lives"
	// LiveColumn is the table column denoting the live relation/edge.
	LiveColumn = "channel_live"
)

// Columns holds all SQL columns for channel fields.
var Columns = []string{
	FieldID,
	FieldExtID,
	FieldName,
	FieldDisplayName,
	FieldImagePath,
	FieldRetention,
	FieldRetentionDays,
	FieldStorageSizeBytes,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRetention holds the default value on creation for the "retention" field.
	DefaultRetention bool
	// DefaultStorageSizeBytes holds the default value on creation for the "storage_size_bytes" field.
	DefaultStorageSizeBytes int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Channel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExtID orders the results by the ext_id field.
func ByExtID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByImagePath orders the results by the image_path field.
func ByImagePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImagePath, opts...).ToFunc()
}

// ByRetention orders the results by the retention field.
func ByRetention(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetention, opts...).ToFunc()
}

// ByRetentionDays orders the results by the retention_days field.
func ByRetentionDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetentionDays, opts...).ToFunc()
}

// ByStorageSizeBytes orders the results by the storage_size_bytes field.
func ByStorageSizeBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageSizeBytes, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByVodsCount orders the results by vods count.
func ByVodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVodsStep(), opts...)
	}
}

// ByVods orders the results by vods terms.
func ByVods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLiveCount orders the results by live count.
func ByLiveCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLiveStep(), opts...)
	}
}

// ByLive orders the results by live terms.
func ByLive(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLiveStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VodsTable, VodsColumn),
	)
}
func newLiveStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LiveInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LiveTable, LiveColumn),
	)
}
